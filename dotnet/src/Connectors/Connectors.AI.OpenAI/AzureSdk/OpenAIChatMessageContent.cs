// Copyright (c) Microsoft. All rights reserved.

using System.Collections.Generic;
using Azure.AI.OpenAI;
using Microsoft.SemanticKernel.AI.ChatCompletion;

namespace Microsoft.SemanticKernel.Connectors.AI.OpenAI;

/// <summary>
/// OpenAI specialized chat message content
/// </summary>
public sealed class OpenAIChatMessageContent : ChatMessageContent
{
    /// <summary>
    /// The metadata key for the <see cref="FunctionCall"/> name property.
    /// </summary>
    public const string FunctionNameProperty = $"{nameof(OpenAIChatMessageContent.FunctionCall)}.{nameof(OpenAIChatMessageContent.FunctionCall.Name)}";

    /// <summary>
    /// The metadata key for the <see cref="FunctionCall"/> arguments property.
    /// </summary>
    public const string FunctionArgumentsProperty = $"{nameof(OpenAIChatMessageContent.FunctionCall)}.{nameof(OpenAIChatMessageContent.FunctionCall.Arguments)}";

    /// <summary>
    /// Initializes a new instance of the <see cref="OpenAIChatMessageContent"/> class.
    /// </summary>
    /// <param name="chatMessage">Azure SDK chat message</param>
    /// <param name="metadata">Additional metadata</param>
    internal OpenAIChatMessageContent(Azure.AI.OpenAI.ChatMessage chatMessage, Dictionary<string, object?>? metadata = null)
        : base(new AuthorRole(chatMessage.Role.ToString()), chatMessage.Content, chatMessage, System.Text.Encoding.UTF8, metadata ?? new Dictionary<string, object?>(4))
    {
        this.FunctionCall = chatMessage.FunctionCall;
        this.Name = chatMessage.Name;

        this.Metadata!.Add(nameof(this.Name), chatMessage.Name);
        this.Metadata.Add(nameof(this.FunctionCall), chatMessage.FunctionCall);
        this.Metadata.Add(FunctionNameProperty, chatMessage.FunctionCall?.Name);
        this.Metadata.Add(FunctionArgumentsProperty, chatMessage.FunctionCall?.Arguments);
    }

    /// <summary>
    /// The name and arguments of a function that should be called, as generated by the model
    /// </summary>
    public FunctionCall FunctionCall { get; set; }

    /// <summary>
    /// The name of the author of this message. `name` is required if role is `function`,
    /// and it should be the name of the function whose response is in the `content`.
    /// May contain a-z, A-Z, 0-9, and underscores, with a maximum length of 64 characters.
    /// </summary>
    public string Name { get; set; }

    /// <summary>
    /// Retrieve the resulting function from the chat result.
    /// </summary>
    /// <returns>The <see cref="OpenAIFunctionResponse"/>, or null if no function was returned by the model.</returns>
    public OpenAIFunctionResponse? GetOpenAIFunctionResponse()
    {
        OpenAIFunctionResponse? functionResponse = null;
        if (this.FunctionCall is not null)
        {
            functionResponse = OpenAIFunctionResponse.FromFunctionCall(this.FunctionCall);
        }
        return functionResponse;
    }
}
